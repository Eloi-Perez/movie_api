openapi: 3.0.0
info:
  title: movie-api
  description: This is a REST API application made with Express. It serves a movies
    Database
  contact:
    name: movie-api
    url: https://github.com/Eloi-Perez/movie_api
  license:
    name: Licensed Under MIT
    url: https://spdx.org/licenses/MIT.html
  version: 0.1.0
servers:
- url: http://localhost:8080
  description: Development server
paths:
  /:
    get:
      summary: Welcome root route.
      description: HTML page.
      operationId: rootGET
      responses:
        "200":
          description: HTML page.
          content:
            text/html: {}
      x-swagger-router-controller: Default
  /img/{Title}:
    get:
      summary: Get Images by Title
      description: Movies images.
      operationId: imgTitleGET
      parameters:
      - name: Title
        in: path
        description: Title of the movie.
        required: true
        style: simple
        explode: false
        schema:
          type: array
          items: {}
      responses:
        "200":
          description: .jpg Movies images.
          content:
            image/jpeg: {}
        "404":
          description: Title not found.
      x-swagger-router-controller: Default
  /movies:
    get:
      summary: Get all Movies.
      description: Retrive the full list of movies and their properties
      operationId: moviesGET
      responses:
        "200":
          description: JSON array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movies'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Default
  /movies/featured:
    get:
      summary: Get Featured Movies.
      description: Retrive the featured list of movies and their properties
      operationId: moviesFeaturedGET
      responses:
        "200":
          description: JSON array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movies'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Default
  /movies/{Title}:
    get:
      summary: Get one Movie.
      description: Retrive movie {Title}.
      operationId: moviesTitleGET
      parameters:
      - name: Title
        in: path
        description: Title of the movie.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Default
  /genres/{Genre}:
    get:
      summary: Get genre info.
      description: Retrive genre {Genre}.
      operationId: genresGenreGET
      parameters:
      - name: Genre
        in: path
        description: Name of the genre.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Default
  /directors/{Director}:
    get:
      summary: Get director info.
      description: Retrive director {Director}.
      operationId: directorsDirectorGET
      parameters:
      - name: Director
        in: path
        description: Name of the director.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Default
  /users:
    post:
      summary: Creates a new user.
      operationId: usersPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
      x-swagger-router-controller: Default
    delete:
      summary: Delete a user by username.
      operationId: usersDELETE
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: Delete Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
      x-swagger-router-controller: Default
    patch:
      summary: Update a user's info, by username.
      description: Update user.
      operationId: usersPATCH
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        "200":
          description: JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
      x-swagger-router-controller: Default
  /login:
    post:
      summary: login User.
      operationId: loginPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201_1'
      x-swagger-router-controller: Default
  /users/{Username}:
    get:
      summary: Get a user by username + myMovies list in User.
      description: Retrive user {Username}.
      operationId: usersUsernameGET
      parameters:
      - name: Username
        in: path
        description: User name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMyMovies'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Default
  /users/{Username}/myMovies:
    patch:
      summary: Update or Add a movie to users's myMovies
      description: Update user myMovies.
      operationId: usersUsernameMyMoviesPATCH
      parameters:
      - name: Username
        in: path
        description: User name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/myMovies'
      responses:
        "200":
          description: JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMyMovies'
      security:
      - bearerAuth: []
      x-swagger-router-controller: Default
components:
  schemas:
    User:
      required:
      - Password
      - Username
      type: object
      properties:
        Username:
          type: string
          example: Joe
        Password:
          type: string
          example: "123456"
    CreateUser:
      allOf:
      - $ref: '#/components/schemas/User'
      - type: object
        properties:
          NewUsername:
            type: string
            example: Joe
          NewPassword:
            type: string
            example: "123456"
          NewEmail:
            type: string
            example: abc@abc.com
          BirthDate:
            type: string
            description: JavaScript Date Object
            format: date-time
            example: 2021-01-30T08:30:00Z
    UpdateUser:
      allOf:
      - $ref: '#/components/schemas/User'
      - required:
        - Email
        type: object
        properties:
          Email:
            type: string
            example: abc@abc.com
          Birthday:
            type: string
            description: JavaScript Date Object
            format: date-time
            example: 2021-01-30T08:30:00Z
    UserMyMovies:
      type: object
      properties:
        Username:
          type: string
          example: Joe
        myMovies:
          type: array
          items:
            $ref: '#/components/schemas/UserMyMovies_myMovies'
      example:
        Username: Joe
        myMovies:
        - Favorite: true
          Movie:
            ImagePath: /img/timecrimes
            Title: Timecrimes
            _id: 60720485078f3662d0e67bfa
          score: 7
          _id: 60720485078f3662d0e67bfa
          RelevanceTT: 9
          PlanToWatch: false
        - Favorite: true
          Movie:
            ImagePath: /img/timecrimes
            Title: Timecrimes
            _id: 60720485078f3662d0e67bfa
          score: 7
          _id: 60720485078f3662d0e67bfa
          RelevanceTT: 9
          PlanToWatch: false
    myMovies:
      required:
      - Movie
      type: object
      properties:
        Movie:
          type: string
          example: Timecrimes
        score:
          type: number
          example: 7
        RelevanceTT:
          type: number
          example: 9
        PlanToWatch:
          type: boolean
          example: false
        Favorite:
          type: boolean
          example: true
    Movie:
      type: object
      properties:
        _id:
          example: 60720485078f3662d0e67bfa
        Title:
          type: string
          example: Timecrimes
        Description:
          type: string
          example: A man accidentally gets into a time machine and...
        Genre:
          type: object
          example: {}
        Director:
          type: object
          example: {}
        Featured:
          type: boolean
          example: true
        ImagePath:
          type: string
          example: /img/timecrimes
      example:
        Description: A man accidentally gets into a time machine and...
        Director: {}
        ImagePath: /img/timecrimes
        Title: Timecrimes
        Featured: true
        _id: 60720485078f3662d0e67bfa
        Genre: {}
    Movies:
      type: array
      items:
        allOf:
        - $ref: '#/components/schemas/Movie'
    inline_response_200:
      type: object
      properties:
        _id:
          example: 60720485078f3662d0e67bfa
        Name:
          example: Drama
        Description:
          example: Focused on emotions and defined by conflict...
      example:
        Description: Focused on emotions and defined by conflict...
        _id: 60720485078f3662d0e67bfa
        Name: Drama
    inline_response_200_1:
      type: object
      properties:
        _id:
          example: 60720485078f3662d0e67bfa
        Name:
          example: Shane Carruth
        Description:
          example: is an American filmmaker, screenwriter, composer, and actor...
      example:
        Description: is an American filmmaker, screenwriter, composer, and actor...
        _id: 60720485078f3662d0e67bfa
        Name: Shane Carruth
    inline_response_201:
      type: object
      properties:
        Message:
          example: Created Successfully
        Username:
          example: Joe
        token:
          example: JWT
      example:
        Message: Created Successfully
        Username: Joe
        token: JWT
    inline_response_200_2:
      type: object
      properties:
        Message:
          example: Deleted successfully
      example:
        Message: Deleted successfully
    inline_response_200_3:
      type: object
      properties:
        Message:
          example: Updated Successfully
        Username:
          example: Joe
      example:
        Message: Updated Successfully
        Username: Joe
    inline_response_201_1:
      type: object
      properties:
        Username:
          example: Joe
        token:
          example: JWT
      example:
        Username: Joe
        token: JWT
    UserMyMovies_Movie:
      type: object
      properties:
        _id:
          example: 60720485078f3662d0e67bfa
        Title:
          type: string
          example: Timecrimes
        ImagePath:
          type: string
          example: /img/timecrimes
      example:
        ImagePath: /img/timecrimes
        Title: Timecrimes
        _id: 60720485078f3662d0e67bfa
    UserMyMovies_myMovies:
      type: object
      properties:
        _id:
          example: 60720485078f3662d0e67bfa
        Movie:
          $ref: '#/components/schemas/UserMyMovies_Movie'
        score:
          type: number
          example: 7
        RelevanceTT:
          type: number
          example: 9
        PlanToWatch:
          type: boolean
          example: false
        Favorite:
          type: boolean
          example: true
      example:
        Favorite: true
        Movie:
          ImagePath: /img/timecrimes
          Title: Timecrimes
          _id: 60720485078f3662d0e67bfa
        score: 7
        _id: 60720485078f3662d0e67bfa
        RelevanceTT: 9
        PlanToWatch: false
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
